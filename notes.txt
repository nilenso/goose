# Clojure references
- https://github.com/overtone/at-at
- https://github.com/jarohen/chime (see it's testing part)
- http://clojurequartz.info/articles/jobs.html
- https://github.com/helins/timer.cljs

# README
- Goose logo
- Motivation:
    - Simplicity is Complicated. We've strived to make the interface as simple as possible
    - For ex: Requiring NS at runtime, multiple redis versions, etc.
- Reliability & scaling
    - Redis writetodisk config
    - Conn-pool settings for scale. Help them with the math
- Getting started
    - if you're using components
    - w/o components
    - specifying own queue. Recommended to namespace it with prefix `goose/queue:`


# Server initialization
- Create/Check queues set
  Maintain state of whether queue has been SADDed to the set, to avoid duplicate calls to Redis

# Enqueue a job
-  Data structure:
     "goose/queues"        (Set of queues)
     "goose/queue:default" (List of jobs)
-  Schema:
     retries: (an integer, can be 0 for no retries)
     queue_name (necessary?)
     args
     job_id
     namespace+class
     created/updated/enqueued at
-  Examples:
     Sidekiq/Redis: "{\"retry\":true,\"queue\":\"default\",\"args\":[\"like a dog\",3],\"class\":\"PlainOldRuby\",\"jid\":\"53dc855f729093f339395f0e\",\"created_at\":1650900367.398494,\"enqueued_at\":1650900367.3986309}"
     Celery/Redis:
     Celery/RabbitMQ:

# Next steps
- implement async
    - PARAMS:
        - NS+fn
        - Optional: args, retry count, queue name,
    - validations:
        - fn is serializable
        - NS is present
        - args are serializable
    - have a multi-arity where config object can be passed in?
    - Can clients use ` to avoid having to write NS?
- implement worker
    - queues are configurable
        - if queues not specified, get them from goose/queues set
    - Use LMOVE RIGHT LEFT
    - Have a unique ID per worker. Should have hostname, container_id for identification
    -
- setup config
    - reference bugle forms, biomass, markdown2clj, honeysqlpostgres
    juxt/aero for config
    config shouldn't be magical.
    how to change config in production from REPL?
    Use atom for managing state of Redis/RabbitMQ clients
    check mount, integrent for dependency injection
- unit tests
    - deps.edn
    - reference smallstalk
    - scenarios
        - E2E works fine
        - async throws error for non-executable/anonymous functions
        - async unable to enqueue to redis
        - config error
        - worker throws error when it cannot find NS  or fn
        - worker reduces retry count/dead-letter queues when fn throws exception during execution
- start-up mechanism on client-side
- start-up mechanism on server-side
    - graceful shutdown?


Future scope
- customizable queues. (Right now, there's only 1 default queue)
-

QQQ
- What is the validate-fields inbuilt function in Clojure?
- namespace require memoization necessary? Clojure's require does that for us
- In the talk explaining Components, Stuart mentioned at https://youtu.be/13cmHf_kt-Q?t=2428 that you cannot just start/stop part of a system. This is one of the applications for having systems inside systems? You can stop an internal system and parent system would still be in start state?
- Goose can have 2 implementations? For applications using components & those not using components?
- If Goose is built using deps, will it work with projects using Lein?
- Is a multi/exec block necessary? How will Redis perform if async jobs are running for more than few mins? We can achieve the same without locks, and a daemon process??
    - Sidekiq Pro v4 has job recovery feature that periodically looks for orphaned jobs and recovers them
- Redis 6.2.0 was GA only 1 year ago. Can we have support for RPOPLPUSH?
- Push entire job into a list vs push a reference?

1. Not doing spec for validation. They just print out statements, don't return an error or throw an exception
2. Not using:
 Metis, Validateur, corroborate https://github.com/mylesmegyesi/metis
    doesn't throw an exception. The function calling it has to write custom logic :(
 Valip https://github.com/weavejester/valip
    no customization of predicates possible
 https://8thlight.com/blog/myles-megyesi/2012/10/16/data-validation-in-clojure.html

